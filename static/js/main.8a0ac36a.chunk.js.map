{"version":3,"sources":["components/restartButton.js","components/gameOverPopup.js","components/youWonPopup.js","components/inputForm.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["RestartButton","props","react_default","a","createElement","className","onClick","restartGamePopup","GameOverPopup","valueFromApp","timeApp","correctAnswer","restartGameApp","YouWonPopup","scoreFromApp","InputForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","console","log","round","allTasks","_this2","currentSet","quiz","map","elem","index","key","onSubmit","handleSubmit","option","type","name","value","checked","selected","onChange","handleChange","Component","Timer","id","timeToAnswer","App","allQuestions","category","questionId","question","questionValue","score","currentRoundPoints","errorMessage","showGameOverPopup","showYouWonPopup","time","winCondition","answeredQuestions","level","data","bind","assertThisInitialized","restartGame","displayYouWonPopup","countTime","getWordQuiz","fetch","method","headers","Content-Type","X-RapidAPI-Host","secrets","X-RapidAPI-Key","response","json","setState","quizlist","_context","t0","message","clearInterval","interval","event","target","selectedNumber","Number","document","querySelectorAll","preventDefault","correct","setInterval","inputForm_InputForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a0ac36a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.scss\";\r\n\r\nexport default function RestartButton(props) {\r\n  return (\r\n    <div>\r\n      <button className=\"button\" onClick={props.restartGamePopup}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../App.scss\";\r\n\r\nexport default function GameOverPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"game-over\">\r\n        <h4>Game Over</h4>\r\n        {props.valueFromApp && (\r\n          <p>\r\n            <span className=\"title answer\">{props.valueFromApp}</span> is wrong!\r\n          </p>\r\n        )}\r\n        {props.timeApp === 0 && (\r\n          <p>\r\n            <span className=\"title\">{props.valueFromApp}</span>Too late!\r\n          </p>\r\n        )}\r\n        <p>\r\n          The correct answer is:<br />\r\n          <span className=\"title\">{props.correctAnswer}</span>\r\n        </p>\r\n        <RestartButton restartGamePopup={props.restartGameApp} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../App.scss\";\r\n\r\nexport default function YouWonPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"game-over\">\r\n        <h4>Congrats, you Won!</h4>\r\n        <p>Your score counts {props.scoreFromApp}</p>\r\n        <RestartButton restartGamePopup={props.restartGameApp} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../App.scss\";\r\nimport axios from \"axios\";\r\n\r\nexport default class InputForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    \r\n  }\r\n  componentDidMount() {\r\n    console.log(this.props.round, this.props.allTasks);\r\n  }\r\n  render() {\r\n    const currentSet = this.props.allTasks[this.props.round - 1];\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p className=\"title\">Words:</p>\r\n          {!currentSet && (<p>Loading....</p>)}\r\n          {currentSet && (<p>{currentSet.quiz.map((elem, index) => (\r\n          <span key={index}>{elem} </span>\r\n          ))}</p>)}\r\n\r\n          <p className=\"title\">Your answer:</p>\r\n          {!currentSet && (<p>Loading....</p>)}\r\n          {currentSet && (\r\n            <form className=\"\" onSubmit={this.props.handleSubmit}>\r\n              {currentSet.option.map((elem, index) => (\r\n                <div className=\"radio\" key={index}>\r\n                  <label>\r\n                    <input \r\n                      type=\"radio\" \r\n                      name=\"quiz\"\r\n                      value={index} \r\n                      checked={this.state.selected} \r\n                      onChange={this.props.handleChange} />\r\n                    {elem}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n              <input className=\"button\" type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          )}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../App.scss\";\r\n\r\nexport default function Timer(props) {\r\n  return (\r\n    <div id=\"timer-container\">\r\n      <div id=\"timer\">\r\n        {/* if time has only one digit */}\r\n        {props.timeApp < 10 && (\r\n          <p className=\"time\">00:0{props.timeApp}</p>\r\n        )}\r\n        {/* if time has two digits */}\r\n        {props.timeApp >= 10 && (\r\n          <p className=\"time\">00:{props.timeApp}</p>\r\n        )}\r\n        <p className=\"time-label\">seconds left</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// Ctrl Shift F\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.scss\";\r\nimport GameOverPopup from \"./components/gameOverPopup\";\r\nimport YouWonPopup from \"./components/youWonPopup\";\r\nimport InputForm from \"./components/inputForm\";\r\nimport Timer from \"./components/timer\";\r\nimport secrets from \"./secrets.json\";\r\n\r\nconst timeToAnswer = 15;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // OLD\r\n      allQuestions: [],\r\n      correctAnswer: \"\",\r\n      category: \"\",\r\n      questionId: 0,\r\n      question: \"\",\r\n      questionValue: 0,\r\n      selected: \"\",\r\n      score: 0,\r\n      currentRoundPoints: 1,\r\n      errorMessage: \"\",\r\n      round: 1,\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      time: timeToAnswer,\r\n      winCondition: 10,\r\n      answeredQuestions: 0,\r\n      level: 5,\r\n      //NEW\r\n      allTasks: [],\r\n      data: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.displayYouWonPopup = this.displayYouWonPopup.bind(this);\r\n    this.countTime = this.countTime.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.countTime();\r\n    this.getWordQuiz();\r\n  }\r\n  async getWordQuiz() {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://twinword-word-association-quiz.p.rapidapi.com/type1/?area=sat&level=\"+this.state.level,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-RapidAPI-Host\": secrets[\"X-RapidAPI-Host\"],\r\n            \"X-RapidAPI-Key\": secrets[\"X-RapidAPI-Key\"]\r\n          }\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      this.setState({ allTasks: data.quizlist });\r\n      console.log(this.state.allTasks)\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }\r\n  restartGame() {\r\n    console.log(\"fired\");\r\n    this.setState({\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      round: 1,\r\n      score: 0,\r\n      value: \"\",\r\n      time: timeToAnswer,\r\n      currentRoundPoints: 1,\r\n      answeredQuestions: 0,\r\n      errorMessage: \"\"\r\n    });\r\n    this.getWordQuiz();\r\n    this.countTime();\r\n  }\r\n  displayYouWonPopup() {\r\n    this.setState({\r\n      showYouWonPopup: true\r\n    });\r\n    clearInterval(this.interval);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({\r\n      selected: event.target.value,\r\n      errorMessage: \"\"\r\n    });\r\n  }\r\n  handleSubmit(event) {\r\n    const currentSet = this.state.allTasks[this.state.round - 1];\r\n    const selectedNumber = Number(this.state.selected);\r\n    //unchecking the radio button\r\n    document.querySelectorAll('input[type=\"radio\"]')[\r\n      selectedNumber\r\n    ].checked = false;\r\n    event.preventDefault();\r\n    console.log(\r\n      typeof selectedNumber,\r\n      typeof this.state.selected,\r\n      \"handleSubmit\"\r\n    );\r\n    // if no answer\r\n    if (!this.state.selected) {\r\n      this.setState({\r\n        errorMessage: \"*Please choose one of the options\"\r\n      });\r\n    } else {\r\n      //if correct answer\r\n      if (selectedNumber === currentSet.correct - 1) {\r\n        this.setState({\r\n          currentRoundPoints: this.state.currentRoundPoints * 2,\r\n          round: this.state.round + 1,\r\n          errorMessage: \"\",\r\n          answeredQuestions: this.state.answeredQuestions + 1,\r\n          time: 60,\r\n          selected: \"\"\r\n        });\r\n        //giving score for the current round\r\n        if (this.state.score === 0) {\r\n          this.setState({\r\n            score: ++this.state.score\r\n          });\r\n        } else {\r\n          this.setState({\r\n            score: this.state.score * 2\r\n          });\r\n        }\r\n        console.log(\"YAYAYAY!\");\r\n        // if wrong answer\r\n      } else {\r\n        this.setState({\r\n          score: 0,\r\n          round: this.state.round,\r\n          errorMessage: \"\",\r\n          answeredQuestions: 0,\r\n          selected: \"\",\r\n          showGameOverPopup: true,\r\n          correctAnswer: currentSet.option[currentSet.correct-1]\r\n        });\r\n        clearInterval(this.interval);\r\n      }\r\n    }\r\n    //Winning the whole round\r\n    if(this.state.round === this.state.winCondition) {\r\n      // this.setState({\r\n      //   showYouWonPopup: true\r\n      // })\r\n      this.displayYouWonPopup();\r\n    }\r\n\r\n  }\r\n  countTime() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        time: this.state.time - 1\r\n      });\r\n      if (this.state.time === 0) {\r\n        clearInterval(this.interval);\r\n        this.setState({\r\n          showGameOverPopup: true\r\n        });\r\n      }\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    const currentSet = this.state.allTasks[this.state.round - 1];\r\n    // console.log(this.state.allTasks[this.state.round - 1])\r\n    let alert = \"\";\r\n    if (this.state.errorMessage) {\r\n      alert = \"input-alert\";\r\n    }\r\n\r\n    // if (currentQuestion) {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main-container\">\r\n          <div className=\"quiz-container\">\r\n            <h1>Quiz</h1>\r\n            <div className=\"questions-container\">\r\n              <p className=\"title\">Round: </p>\r\n              <p>{this.state.round}</p>\r\n\r\n              <p className=\"title\">Points for the current round: </p>\r\n              <p className=\"current-points\">{this.state.currentRoundPoints}</p>\r\n\r\n              <p className=\"title\">Questions left to win: </p>\r\n              <p>{this.state.winCondition - this.state.answeredQuestions}</p>\r\n\r\n              <p className=\"title\">Your score: </p>\r\n              <p>{this.state.score}</p>\r\n            </div>\r\n            <p className=\"error-message\">{this.state.errorMessage}</p>\r\n            {this.state.allTasks && (\r\n              <InputForm\r\n                selected={this.state.selected}\r\n                round={this.state.round}\r\n                allTasks={this.state.allTasks}\r\n                handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n              />\r\n            )}\r\n          </div>\r\n          <Timer timeApp={this.state.time} />\r\n        </div>\r\n\r\n        {this.state.showGameOverPopup && (\r\n          <GameOverPopup\r\n            restartGameApp={this.restartGame}\r\n            valueFromApp={this.state.value}\r\n            correctAnswer={this.state.correctAnswer}\r\n            timeApp={this.state.time}\r\n          />\r\n        )}\r\n\r\n        {this.state.showYouWonPopup && (\r\n          <YouWonPopup\r\n            restartGameApp={this.restartGame}\r\n            scoreFromApp={this.state.score}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}