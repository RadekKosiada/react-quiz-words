{"version":3,"sources":["components/restartButton.js","components/gameOverPopup.js","components/youWonPopup.js","components/inputForm.js","components/words.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["RestartButton","props","react_default","a","createElement","className","onClick","restartGamePopup","GameOverPopup","timeApp","correctAnswer","restartGameApp","YouWonPopup","scoreFromApp","InputForm","currentSet","allTasks","round","alert","errorMessage","onSubmit","handleSubmit","option","map","elem","index","key","type","name","value","onChange","handleChange","Words","quiz","Timer","timeToAnswer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","score","currentRoundPoints","showGameOverPopup","showYouWonPopup","time","winCondition","answeredQuestions","level","bind","assertThisInitialized","restartGame","displayYouWonPopup","countTime","getWordQuiz","fetch","method","headers","Content-Type","X-RapidAPI-Host","secrets","X-RapidAPI-Key","response","json","data","setState","quizlist","console","log","_context","t0","message","clearInterval","interval","event","target","selectedNumber","Number","document","querySelectorAll","checked","preventDefault","correct","_this2","setInterval","valueFromApp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a84ac831.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../scss-files/App.scss\";\r\n\r\nexport default function RestartButton(props) {\r\n  return (\r\n    <div>\r\n      <button className=\"button\" onClick={props.restartGamePopup}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../scss-files/App.scss\";\r\n\r\nexport default function GameOverPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\">\r\n        <div className=\"game-over\">\r\n          {props.timeApp === 0 && (\r\n            <div>\r\n              <h4>Too late!</h4>\r\n              <p>\r\n                The correct answer is:\r\n                <br />\r\n                <span className=\"title\">{props.correctAnswer}</span>\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {props.timeApp > 0 && (\r\n            <div>\r\n              <h4>Wrong</h4>\r\n              <p>\r\n                The correct answer is:\r\n                <br />\r\n                <span className=\"title\">{props.correctAnswer}</span>\r\n              </p>\r\n            </div>\r\n          )}\r\n          <RestartButton restartGamePopup={props.restartGameApp} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../scss-files/App.scss\";\r\n\r\nexport default function YouWonPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"game-over\">\r\n        <h4>Congrats, you won!</h4>\r\n        <p>Your score counts {props.scoreFromApp}</p>\r\n        <RestartButton restartGamePopup={props.restartGameApp} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../scss-files/App.scss\";\r\nimport \"../scss-files/radioButton.scss\";\r\n\r\nexport default function InputForm(props) {\r\n  const currentSet = props.allTasks[props.round - 1];\r\n  let alert = \"\";\r\n  if (props.errorMessage) {\r\n    alert = \"input-alert\";\r\n  }\r\n\r\n  if (currentSet) {\r\n    return (\r\n      <form className=\"answers\" onSubmit={props.handleSubmit}>\r\n        {currentSet.option.map((elem, index) => (\r\n          <label className=\"radio\" key={index}>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"quiz\"\r\n              value={index}\r\n              // checked={this.props.selected}\r\n              onChange={props.handleChange}\r\n            />\r\n            <span className={\"checkmark \" + alert} />\r\n            <span className=\"single-answer\">{elem}</span>\r\n          </label>\r\n        ))}\r\n        <input className=\"button\" type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  } else {\r\n    return <p className=\"loading-answers\">Loading answers....</p>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../scss-files/App.scss\";\r\nimport \"../scss-files/radioButton.scss\";\r\n\r\nexport default function Words(props) {\r\n  const currentSet = props.allTasks[props.round - 1];\r\n\r\n  if (currentSet) {\r\n    return (\r\n      <div className=\"words\">\r\n        {currentSet.quiz.map((elem, index) => (\r\n          <p key={index}>{elem}</p>\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p className=\"loading-words\">Loading words....</p>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../scss-files/App.scss\";\r\n\r\nexport default function Timer(props) {\r\n  const currentSet = props.allTasks[props.round - 1];\r\n  if (currentSet) {\r\n    return (\r\n      <div className=\"timer-container\">\r\n        {/* if time has only one digit */}\r\n        {props.timeApp < 10 && <h2 className=\"time\">00:0{props.timeApp}</h2>}\r\n        {/* if time has two digits */}\r\n        {props.timeApp >= 10 && <h2 className=\"time\">00:{props.timeApp}</h2>}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <h2 className=\"starting\">Starting...</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./scss-files/App.scss\";\r\nimport GameOverPopup from \"./components/gameOverPopup\";\r\nimport YouWonPopup from \"./components/youWonPopup\";\r\nimport InputForm from \"./components/inputForm\";\r\nimport Words from \"./components/words\";\r\nimport Timer from \"./components/timer\";\r\nimport secrets from \"./secrets.json\";\r\n\r\nconst timeToAnswer = 15;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allTasks: [],\r\n      correctAnswer: \"\",\r\n      selected: \"\",\r\n      score: 0,\r\n      currentRoundPoints: 1,\r\n      errorMessage: false,\r\n      round: 1,\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      time: timeToAnswer,\r\n      winCondition: 10,\r\n      answeredQuestions: 0,\r\n      level: 5\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.displayYouWonPopup = this.displayYouWonPopup.bind(this);\r\n    this.countTime = this.countTime.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.getWordQuiz();\r\n  }\r\n  async getWordQuiz() {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://twinword-word-association-quiz.p.rapidapi.com/type1/?area=sat&level=\" +\r\n          this.state.level,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-RapidAPI-Host\": secrets[\"X-RapidAPI-Host\"],\r\n            \"X-RapidAPI-Key\": secrets[\"X-RapidAPI-Key\"]\r\n          }\r\n        }\r\n      );\r\n      const data = await response.json();\r\n      this.setState({ allTasks: data.quizlist });\r\n      //calling countTime here so the timer starts first when the data loads\r\n      this.countTime();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  }\r\n  restartGame() {\r\n    console.log(\"fired\");\r\n    this.setState({\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      round: 1,\r\n      score: 0,\r\n      value: \"\",\r\n      time: timeToAnswer,\r\n      currentRoundPoints: 1,\r\n      answeredQuestions: 0,\r\n      errorMessage: false\r\n    });\r\n    this.getWordQuiz();\r\n  }\r\n  displayYouWonPopup() {\r\n    this.setState({\r\n      showYouWonPopup: true\r\n    });\r\n    clearInterval(this.interval);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({\r\n      selected: event.target.value,\r\n      errorMessage: false\r\n    });\r\n  }\r\n  handleSubmit(event) {\r\n    const currentSet = this.state.allTasks[this.state.round - 1];\r\n    const selectedNumber = Number(this.state.selected);\r\n    //unchecking the radio button\r\n    document.querySelectorAll('input[type=\"radio\"]')[\r\n      selectedNumber\r\n    ].checked = false;\r\n    event.preventDefault();\r\n    console.log(\r\n      typeof selectedNumber,\r\n      typeof this.state.selected,\r\n      \"handleSubmit\"\r\n    );\r\n    // if no answer\r\n    if (!this.state.selected) {\r\n      this.setState({\r\n        errorMessage: true\r\n      });\r\n    } else {\r\n      //if correct answer\r\n      if (selectedNumber === currentSet.correct - 1) {\r\n        this.setState({\r\n          currentRoundPoints: this.state.currentRoundPoints * 2,\r\n          round: this.state.round + 1,\r\n          errorMessage: false,\r\n          answeredQuestions: this.state.answeredQuestions + 1,\r\n          time: timeToAnswer,\r\n          selected: \"\"\r\n        });\r\n        //giving score for the current round\r\n        if (this.state.score === 0) {\r\n          this.setState({\r\n            score: ++this.state.score\r\n          });\r\n        } else {\r\n          this.setState({\r\n            score: this.state.score * 2\r\n          });\r\n        }\r\n        console.log(\"YAYAYAY!\");\r\n        // if wrong answer\r\n      } else {\r\n        this.setState({\r\n          score: 0,\r\n          round: this.state.round,\r\n          errorMessage: false,\r\n          answeredQuestions: 0,\r\n          selected: \"\",\r\n          showGameOverPopup: true,\r\n          correctAnswer: currentSet.option[currentSet.correct - 1]\r\n        });\r\n        clearInterval(this.interval);\r\n      }\r\n    }\r\n    //Winning the whole round\r\n    if (this.state.round === this.state.winCondition) {\r\n      // this.setState({\r\n      //   showYouWonPopup: true\r\n      // })\r\n      this.displayYouWonPopup();\r\n    }\r\n  }\r\n  countTime() {\r\n    const currentSet = this.state.allTasks[this.state.round - 1];\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        time: this.state.time - 1\r\n      });\r\n      if (this.state.time === 0) {\r\n        clearInterval(this.interval);\r\n        this.setState({\r\n          showGameOverPopup: true,\r\n          correctAnswer: currentSet.option[currentSet.correct - 1]\r\n        });\r\n      }\r\n    }, 1000);\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main-container\">\r\n          {/* first row */}\r\n          <h1 className=\"game-title\">Quiz</h1>\r\n          <Timer\r\n            timeApp={this.state.time}\r\n            allTasks={this.state.allTasks}\r\n            round={this.state.round}\r\n          />\r\n          {/* second row */}\r\n          <p className=\"round\">\r\n            <span className=\"title\">Round: </span>\r\n            <span>{this.state.round}</span>\r\n          </p>\r\n\r\n          <p className=\"questions-left\">\r\n            <span className=\"title\">Questions: </span>\r\n            <span>\r\n              {this.state.winCondition - this.state.answeredQuestions}\r\n            </span>\r\n          </p>\r\n          <p className=\"score\">\r\n            <span className=\"title\">Score: </span>\r\n            <span>{this.state.score}</span>\r\n          </p>\r\n          {/* third row */}\r\n          <div className=\"instruction\">\r\n            <p>\r\n              Choose the best matching answer for following words within given\r\n              time\r\n            </p>\r\n            <p className=\"error-message\">{this.state.errorMessage}</p>\r\n          </div>\r\n          {/* fourth row */}\r\n          <Words allTasks={this.state.allTasks} round={this.state.round} />\r\n          {/* fifth row */}\r\n          <InputForm\r\n            selected={this.state.selected}\r\n            round={this.state.round}\r\n            allTasks={this.state.allTasks}\r\n            handleChange={this.handleChange}\r\n            handleSubmit={this.handleSubmit}\r\n            errorMessage={this.state.errorMessage}\r\n          />\r\n        </div>\r\n\r\n        {this.state.showGameOverPopup && (\r\n          <GameOverPopup\r\n            restartGameApp={this.restartGame}\r\n            valueFromApp={this.state.value}\r\n            correctAnswer={this.state.correctAnswer}\r\n            timeApp={this.state.time}\r\n          />\r\n        )}\r\n\r\n        {this.state.showYouWonPopup && (\r\n          <YouWonPopup\r\n            restartGameApp={this.restartGame}\r\n            scoreFromApp={this.state.score}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}